/*=========================================================================
  *
  * Program:      Sen2agri-Processors
  * Language:     C++
  * Copyright:    2015-2016, CS Romania, office@c-s.ro
  * See COPYRIGHT file for details.
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.

 =========================================================================*/
 
/*=========================================================================

  Program:   phenotb
  Language:  C++

  Copyright (c) Jordi Inglada. All rights reserved.

  See phenotb-copyright.txt for details.

  This software is distributed WITHOUT ANY WARRANTY; without even
  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE.  See the above copyright notices for more information.

=========================================================================*/
#include "itkMacro.h"
#include "phenoFunctions.h"
#include "gapfilling.h"
#include <gsl/gsl_errno.h>
#include <gsl/gsl_spline.h>
#include <gsl/gsl_math.h>
#include <gsl/gsl_deriv.h>
#include <functional>

using PrecisionType = double;
using PixelType = itk::VariableLengthVector<PrecisionType>;
using PairType = std::pair<PixelType, PixelType>;
using SplineFunctorType =
  GapFilling::SplineGapFillingFunctor<PixelType>;


double fun_at_x(double t, void* params)
{
  auto par_pair = static_cast<PairType*>(params);
  auto p = par_pair->first;
  auto d = par_pair->second;
  unsigned int nbDates = p.GetSize();
  // Prepare the data for gsl
  double* x = new double[nbDates];
  double* y = new double[nbDates];
  for(size_t i = 0; i < nbDates; i++)
    {
    x[i] = d[i];
    y[i] = p[i];
    }
  gsl_interp_accel* acc = gsl_interp_accel_alloc();
  gsl_spline* spline;
  spline = gsl_spline_alloc(gsl_interp_akima, nbDates);
  gsl_spline_init(spline, x, y, nbDates);
  auto result = gsl_spline_eval(spline, t, acc);
  gsl_spline_free(spline);
  gsl_interp_accel_free(acc);
  delete [] x;
  delete [] y;
  return result;
}

PixelType differentiate_profile(const PixelType& p, 
                                const PixelType& d)
{
  auto dp = p;
  auto nb_dates = d.GetSize();
  auto params = std::make_pair(p,d);
  gsl_function F;
  double result, abserr;
  F.function = &fun_at_x;
  F.params = &params;
  gsl_deriv_forward (&F, d[0], 1e-8, &result, &abserr);
  dp[0] = result;
  for(size_t i=1; i<nb_dates-1; ++i)
    {
    gsl_deriv_central (&F, d[i], 1e-8, &result, &abserr);
    dp[i] = result;
    }
  gsl_deriv_backward (&F, d[nb_dates-1], 1e-8, &result, &abserr);
  dp[nb_dates-1] = result;
  return dp;
}

PixelType differentiate_profile(const PixelType& p, 
                                const PixelType& d,
                                unsigned int n)
{
  auto result = p;
  for(size_t i=0; i<n; ++i)
    result = differentiate_profile(result, d);
  return result;
}

int phenoEarlyEmergence(int argc, char * argv[])
{
  if(argc>1)
    {
    for(auto i=0; i<argc; ++i)
      std::cout << i << " --> " << argv[i] << std::endl;
    return EXIT_FAILURE;
    }

  struct testData {
    std::pair<int, int> coord;
    std::vector<double> t;
    std::vector<double> y;
    std::vector<double> x;
  };

  std::vector<testData> tdv{
    // 2006
    {
    {129, 259},
      {44, 72, 84, 87, 121, 146, 154, 157, 163, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
        {381.063, 588.835, 803.718, 1092.99, 1511, 1454.62, 1182.27, 976.669, 735.385, 593.343, 623.481, 615.504, 531.941, 543.894, 489.17, 473.941, 484.024, 450.579, 379.022, 379.256, 371, 392.53, 371, 380.896, 403.589, 496.467, 483.293, 452.616, 491.502, 485.171, 451.155, 448.119, 440.543},
          {84.9654, 7.54795, 160.91, 10.5134}
    },
    
      {
      {127, 274},
        {72, 84, 87, 121, 133, 146, 154, 157, 163, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
          {133.688, 136.163, 138.413, 164.054, 189.2, 219.978, 427.165, 307.331, 703.3, 1300.15, 1980.88, 1831.31, 2042, 1851.15, 1759.52, 1276.84, 1225.93, 792.773, 216.965, 153.584, 153.258, 149.612, 144.218, 144.589, 132.802, 139.093, 133.754, 132.253, 132.46, 132.103, 132.081, 132, 132.116},
            {166.985, 4.7657, 201.645, 5.68637}
      },
    
        {
        {127, 273},
          {72, 84, 87, 121, 133, 146, 154, 157, 163, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
            {140.617, 141.888, 143.841, 161.896, 176.36, 240.039, 511.983, 444.511, 978.71, 1784.87, 2386.53, 2340.87, 2547, 2306.58, 2117.74, 1700.99, 1379.49, 966.779, 238.504, 157.109, 151.609, 147.951, 147.012, 149.123, 144.527, 143.737, 140.571, 140.095, 140.086, 140, 140.016, 140.009, 140.031},
              {165.899, 4.98905, 201.319, 5.59813}
        },
    
          {
          {127, 217},
            {44, 72, 84, 87, 121, 146, 154, 157, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
              {616.932, 1431.75, 2270.69, 2279.21, 2940, 2256.45, 1971.64, 1225.73, 343.818, 292.694, 276.907, 261.357, 250.769, 256.292, 244.801, 227.095, 230.353, 200.056, 192.361, 172.067, 184.405, 201.196, 177.169, 179.472, 138.555, 125.199, 116.015, 119.78, 117.703, 117.111, 112.874, 110},
                {70.4857, 14.0757, 156.036, 7.46773}
          },
    
            {
            {127, 214},
              {44, 72, 84, 87, 121, 146, 154, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
                {923.971, 1815.43, 2632.32, 2595.31, 3010, 2350.16, 1581.02, 282.445, 287.602, 270.316, 261.534, 231.527, 243.668, 233.34, 217.855, 203.754, 189.644, 172.527, 171.651, 177.819, 182.508, 178.608, 142.067, 131.032, 119.412, 118.671, 118.45, 116.265, 114.229, 110},
                  {61.2169, 15.4533, 155.064, 8.10021}
            },
    
              {
              {127, 207},
                {44, 72, 84, 87, 121, 146, 154, 175, 178, 182, 188, 194, 197, 200, 206, 218, 221, 230, 242, 244, 247, 250, 268, 287, 302, 304, 307, 310, 316, 325},
                  {1044.37, 1979.82, 2765.45, 2711.98, 3080, 2592.24, 1945.46, 306.546, 264.925, 277.609, 260.564, 235.725, 251.121, 227.002, 244.357, 226.914, 226.072, 208.725, 173.07, 167.642, 166.151, 173.795, 139.123, 123.153, 106.607, 104.516, 102.947, 102.539, 99.567, 93},
                    {58.0186, 15.8613, 158.038, 7.66898}
              },

                {
                {127, 193},
                  {44, 72, 84, 87, 121, 146, 154, 166, 175, 178, 182, 188, 194, 197, 200, 206, 218, 221, 230, 242, 244, 247, 250, 268, 287, 302, 304, 307, 310, 316, 325},
                    {478.382, 1383.47, 2479.3, 2381.43, 2994, 1954.88, 931.446, 426.812, 306.132, 290.811, 226.768, 228.287, 201.317, 207.916, 201.965, 200.009, 198.634, 197.235, 176.335, 162.062, 164.113, 161.665, 164.047, 142.811, 131.995, 124.513, 123.851, 125.27, 121.665, 123.542, 120},
                      {72.4664, 10.1108, 149.132, 7.10716}
                },

                  {
                  {128, 273},
                    {72, 84, 87, 121, 133, 146, 154, 157, 163, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
                      {210, 234, 288, 244, 257, 361, 791, 706, 1364, 2070, 2760, 2547, 2631, 2527, 2348, 1722, 1447, 1106, 321, 201, 178, 180, 167, 195, 175, 217, 174, 161, 182, 135, 144, 178, 235},
                        {163.017, 5.8154, 201.445, 6.04369}
                  },
                    {
                    {128, 334},
                      {72, 78, 87, 121, 133, 146, 154, 157, 163, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 268, 287, 302, 304, 307, 310, 316, 325},
                        {136.077, 138.606, 141.909, 168.952, 195.245, 296.44, 684.913, 636.593, 1295.21, 2063.05, 2760, 2538.33, 2582.55, 2370.65, 2050.44, 1442.67, 1156.79, 796.114, 214.786, 154.681, 142.139, 141.701, 139.023, 141.324, 138.509, 137.578, 135.258, 135.041, 135.06, 135, 135.006, 135.015, 135.012},
                          {163.744, 5.40348, 198.247, 5.49223}
                    },

                      {
                      {128, 213},
                        {44, 72, 84, 87, 121, 146, 154, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
                          {1185.15, 2238.93, 3028, 2786.9, 2793.6, 1883.77, 1164.41, 237.242, 230.593, 233.361, 227.672, 214.357, 226.698, 207.792, 189.646, 167.399, 171.508, 144.989, 149.128, 147.813, 144.505, 157.936, 123.546, 118.41, 110.825, 111.475, 110.784, 109.273, 106.799, 105},
                            {52.3775, 14.0586, 149.363, 9.77924}
                      },

                        {
                        {128, 206},
                          {44, 72, 84, 87, 121, 146, 154, 175, 178, 182, 188, 194, 197, 200, 206, 218, 221, 230, 242, 244, 247, 250, 268, 287, 302, 304, 307, 310, 316, 325},
                            {1043, 2099, 2924, 2712, 2917, 2340, 1761, 308, 271, 292, 263, 251, 273, 277, 235, 276, 263, 273, 225, 224, 223, 226, 189, 160, 148, 143, 140, 125, 126, 112},
                              {54.5624, 13.3132, 156.903, 8.306}
                        },

                          {
                          {127, 267},
                            {44, 72, 84, 87, 121, 146, 154, 157, 163, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
                              {422, 424, 500, 1024, 1400, 2088, 2203, 2403, 2153, 2230, 2632, 2100, 2725, 2592, 2510, 790, 605, 305, 240, 241, 283, 399, 318, 235, 421, 559, 733, 486, 634, 823, 559, 1078, 1012},
                                {121.629, 23.8008, 196.203, 0.858038}
                          },

                            {
                            {127, 331},
                              {72, 78, 87, 121, 133, 146, 154, 157, 163, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 268, 287, 302, 304, 307, 310, 316, 325},
                                {211, 229, 287, 182, 202, 247, 582, 500, 1082, 1960, 2727, 2557, 2764, 2609, 2152, 1617, 1109, 1183, 326, 223, 226, 229, 220, 209, 229, 165, 155, 169, 167, 159, 155, 164},
                                  {165.403, 4.68359, 199.902, 5.98582}
                            },

                              {
                              {127, 275},
                                {72, 84, 87, 121, 133, 146, 154, 157, 163, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
                                  {211, 212, 202, 231, 232, 221, 391, 406, 581, 1314, 1769, 1687, 1768, 1479, 1368, 857, 900, 748, 229, 187, 200, 194, 167, 178, 116, 200, 188, 146, 157, 158, 154, 126, 201},
                                    {165.475, 4.30968, 199.862, 7.04612}
                              },

                                {
                                {127, 213},
                                  {44, 72, 84, 87, 121, 146, 154, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
                                    {1283, 2289, 3236, 2836, 3151, 2509, 1820, 305, 306, 300, 285, 278, 306, 279, 271, 267, 247, 231, 225, 251, 254, 272, 188, 188, 150, 154, 145, 146, 132, 101},
                                      {52.8717, 15.3867, 155.988, 8.84971}
                                },

                                  { 
                                  {127, 211},
                                    {44, 72, 84, 87, 121, 146, 154, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
                                      {1052, 2131, 3064, 2884, 3048, 2422, 1676, 330, 314, 307, 295, 269, 295, 264, 258, 268, 248, 236, 242, 258, 267, 262, 196, 168, 160, 152, 145, 145, 128, 93},
                                        {55.2669, 13.1556, 156.173, 9.12468}
                                  },

                                    {
                                    {127, 271},
                                      {72, 84, 87, 121, 133, 146, 154, 157, 163, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
                                        {331, 356, 701, 511, 515, 993, 1701, 1482, 1762, 2100, 2418, 2671, 2626, 2279, 2392, 2128, 2104, 1751, 826, 678, 575, 600, 426, 437, 705, 459, 924, 560, 652, 736, 607, 821, 873},
                                          {154.703, 9.67709, 211.553, 10.3496}
                                    },
                                      {
                                      {127, 277},
                                        {72, 84, 87, 121, 133, 146, 154, 157, 163, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
                                          {216, 186, 193, 210, 210, 254, 571, 599, 1060, 1844, 2370, 2043, 2591, 2106, 1668, 1306, 912, 728, 222, 183, 202, 185, 164, 181, 151, 214, 185, 160, 161, 162, 178, 128, 174},
                                            {165.23, 5.9179, 197.02, 5.63348}
                                      },
                                        {
                                        {128, 249},
                                          {44, 72, 84, 87, 121, 146, 154, 157, 163, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
                                            {411, 1443, 2533, 2654, 3073, 2466, 1368, 793, 430, 291, 266, 308, 304, 269, 256, 293, 293, 287, 249, 279, 304, 306, 334, 309, 328, 390, 157, 136, 117, 141, 119, 90, 121},
                                              {72.5646, 8.37544, 152.297, 4.99407}
                                        },
                                          {
                                          {128, 273},
                                            {72, 84, 87, 121, 133, 146, 154, 157, 163, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
                                              {136.077, 138.606, 141.909, 168.952, 195.245, 296.44, 684.913, 636.593, 1295.21, 2063.05, 2760, 2538.33, 2582.55, 2370.65, 2050.44, 1442.67, 1156.79, 796.114, 214.786, 154.681, 142.139, 141.701, 139.023, 141.324, 138.509, 137.578, 135.258, 135.041, 135.06, 135, 135.006, 135.015, 135.012},
                                                {163.744, 5.40348, 198.247, 5.49223}
                                          },
                                            {
                                            {90, 0},
                                              {42, 75, 79, 88, 122, 172, 181, 192, 206, 216, 225, 233, 241, 247, 265, 271},
                                                {221, 446, 852, 984, 1290, 340, 306, 282, 209, 178, 170, 184, 173, 167, 164, 156},
                                                  {79.1651, 6.77073, 156.75, 11.481}
                                            },
                                              {
                                              {9, 245},
                                                {39, 169, 176, 191, 212, 233, 240, 267, 279, 283, 299},
                                                  {91, 244, 462, 2575, 2717, 1822, 1272, 209, 194, 136, 123},
                                                    {181.746, 3.31928, 238.459, 7.93025}
                                              },
                                                {
                                                {92, 294},
                                                  {42, 75, 79, 88, 122, 152, 172, 181, 192, 206, 216, 225, 233, 241, 247, 265, 271, 288, 358},
                                                    {473, 707, 889, 1103, 1875, 1855, 739, 546, 757, 762, 622, 564, 473, 418, 440, 353, 371, 478, 824},
                                                      {87.1494, 10.9248, 167.079, 7.02191},
                                                        }
  };
  auto pr_id = 0;
  for(auto& test : tdv)
    {
    ++pr_id;
    auto date_step = 10;
    auto nb_dates = static_cast<unsigned int>(test.t.size());
    auto last_doy = static_cast<unsigned int>(test.t[nb_dates-1]);
    auto nb_out_dates = 
      static_cast<unsigned int>(last_doy/static_cast<double>(date_step));
    //Weekly interpolation

    PixelType dv{nb_dates}, odv{nb_out_dates}, p{nb_dates}, m{nb_dates};
    for(size_t i=0; i<nb_dates; ++i)
      {
      dv[i] = test.t[i];
      p[i] = test.y[i];
      //all dates are valid
      m[i] = PrecisionType{0};
      }
    //weekly output dates
    for(size_t i=0; i<nb_out_dates; ++i)
      odv[i] = i*date_step+1;

    auto weekly_profile = SplineFunctorType(dv, odv)(p,m);

    //3rd derivative
    auto diff_profile = differentiate_profile(weekly_profile, odv, 3);
  
    std::ofstream dummy_file;
    std::stringstream out_file_name;
    out_file_name << "/tmp/dummy_"<< pr_id << ".txt";
      
    dummy_file.open(out_file_name.str(), std::ofstream::out);
    dummy_file << "#od\t op\t diff_p\t id\t ip\n";
    for(size_t i=0; i<nb_out_dates; ++i)
      {
      dummy_file << odv[i] << "\t" << weekly_profile[i] << "\t"
                 << diff_profile[i] << "\t";
      if(i<nb_dates)
        dummy_file << dv[i] << "\t" << p[i] << "\n";
      else
        dummy_file << "\n";
      }
    dummy_file.close();
    }

//1st maximum
  return EXIT_SUCCESS;
}

int phenoEarlyEmergenceCB(int argc, char * argv[])
{
  if(argc>1)
    {
    for(auto i=0; i<argc; ++i)
      std::cout << i << " --> " << argv[i] << std::endl;
    return EXIT_FAILURE;
    }

  struct testData {
    std::pair<int, int> coord;
    std::vector<double> t;
    std::vector<double> y;
    std::vector<double> x;
  };

  std::vector<testData> tdv{
    // 2006
    {
    {129, 259},
      {44, 72, 84, 87, 121, 146, 154, 157, 163, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
        {381.063, 588.835, 803.718, 1092.99, 1511, 1454.62, 1182.27, 976.669, 735.385, 593.343, 623.481, 615.504, 531.941, 543.894, 489.17, 473.941, 484.024, 450.579, 379.022, 379.256, 371, 392.53, 371, 380.896, 403.589, 496.467, 483.293, 452.616, 491.502, 485.171, 451.155, 448.119, 440.543},
          {84.9654, 7.54795, 160.91, 10.5134}
    },
    
      {
      {127, 274},
        {72, 84, 87, 121, 133, 146, 154, 157, 163, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
          {133.688, 136.163, 138.413, 164.054, 189.2, 219.978, 427.165, 307.331, 703.3, 1300.15, 1980.88, 1831.31, 2042, 1851.15, 1759.52, 1276.84, 1225.93, 792.773, 216.965, 153.584, 153.258, 149.612, 144.218, 144.589, 132.802, 139.093, 133.754, 132.253, 132.46, 132.103, 132.081, 132, 132.116},
            {166.985, 4.7657, 201.645, 5.68637}
      },
    
        {
        {127, 273},
          {72, 84, 87, 121, 133, 146, 154, 157, 163, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
            {140.617, 141.888, 143.841, 161.896, 176.36, 240.039, 511.983, 444.511, 978.71, 1784.87, 2386.53, 2340.87, 2547, 2306.58, 2117.74, 1700.99, 1379.49, 966.779, 238.504, 157.109, 151.609, 147.951, 147.012, 149.123, 144.527, 143.737, 140.571, 140.095, 140.086, 140, 140.016, 140.009, 140.031},
              {165.899, 4.98905, 201.319, 5.59813}
        },
    
          {
          {127, 217},
            {44, 72, 84, 87, 121, 146, 154, 157, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
              {616.932, 1431.75, 2270.69, 2279.21, 2940, 2256.45, 1971.64, 1225.73, 343.818, 292.694, 276.907, 261.357, 250.769, 256.292, 244.801, 227.095, 230.353, 200.056, 192.361, 172.067, 184.405, 201.196, 177.169, 179.472, 138.555, 125.199, 116.015, 119.78, 117.703, 117.111, 112.874, 110},
                {70.4857, 14.0757, 156.036, 7.46773}
          },
    
            {
            {127, 214},
              {44, 72, 84, 87, 121, 146, 154, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
                {923.971, 1815.43, 2632.32, 2595.31, 3010, 2350.16, 1581.02, 282.445, 287.602, 270.316, 261.534, 231.527, 243.668, 233.34, 217.855, 203.754, 189.644, 172.527, 171.651, 177.819, 182.508, 178.608, 142.067, 131.032, 119.412, 118.671, 118.45, 116.265, 114.229, 110},
                  {61.2169, 15.4533, 155.064, 8.10021}
            },
    
              {
              {127, 207},
                {44, 72, 84, 87, 121, 146, 154, 175, 178, 182, 188, 194, 197, 200, 206, 218, 221, 230, 242, 244, 247, 250, 268, 287, 302, 304, 307, 310, 316, 325},
                  {1044.37, 1979.82, 2765.45, 2711.98, 3080, 2592.24, 1945.46, 306.546, 264.925, 277.609, 260.564, 235.725, 251.121, 227.002, 244.357, 226.914, 226.072, 208.725, 173.07, 167.642, 166.151, 173.795, 139.123, 123.153, 106.607, 104.516, 102.947, 102.539, 99.567, 93},
                    {58.0186, 15.8613, 158.038, 7.66898}
              },

                {
                {127, 193},
                  {44, 72, 84, 87, 121, 146, 154, 166, 175, 178, 182, 188, 194, 197, 200, 206, 218, 221, 230, 242, 244, 247, 250, 268, 287, 302, 304, 307, 310, 316, 325},
                    {478.382, 1383.47, 2479.3, 2381.43, 2994, 1954.88, 931.446, 426.812, 306.132, 290.811, 226.768, 228.287, 201.317, 207.916, 201.965, 200.009, 198.634, 197.235, 176.335, 162.062, 164.113, 161.665, 164.047, 142.811, 131.995, 124.513, 123.851, 125.27, 121.665, 123.542, 120},
                      {72.4664, 10.1108, 149.132, 7.10716}
                },

                  {
                  {128, 273},
                    {72, 84, 87, 121, 133, 146, 154, 157, 163, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
                      {210, 234, 288, 244, 257, 361, 791, 706, 1364, 2070, 2760, 2547, 2631, 2527, 2348, 1722, 1447, 1106, 321, 201, 178, 180, 167, 195, 175, 217, 174, 161, 182, 135, 144, 178, 235},
                        {163.017, 5.8154, 201.445, 6.04369}
                  },
                    {
                    {128, 334},
                      {72, 78, 87, 121, 133, 146, 154, 157, 163, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 268, 287, 302, 304, 307, 310, 316, 325},
                        {136.077, 138.606, 141.909, 168.952, 195.245, 296.44, 684.913, 636.593, 1295.21, 2063.05, 2760, 2538.33, 2582.55, 2370.65, 2050.44, 1442.67, 1156.79, 796.114, 214.786, 154.681, 142.139, 141.701, 139.023, 141.324, 138.509, 137.578, 135.258, 135.041, 135.06, 135, 135.006, 135.015, 135.012},
                          {163.744, 5.40348, 198.247, 5.49223}
                    },

                      {
                      {128, 213},
                        {44, 72, 84, 87, 121, 146, 154, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
                          {1185.15, 2238.93, 3028, 2786.9, 2793.6, 1883.77, 1164.41, 237.242, 230.593, 233.361, 227.672, 214.357, 226.698, 207.792, 189.646, 167.399, 171.508, 144.989, 149.128, 147.813, 144.505, 157.936, 123.546, 118.41, 110.825, 111.475, 110.784, 109.273, 106.799, 105},
                            {52.3775, 14.0586, 149.363, 9.77924}
                      },

                        {
                        {128, 206},
                          {44, 72, 84, 87, 121, 146, 154, 175, 178, 182, 188, 194, 197, 200, 206, 218, 221, 230, 242, 244, 247, 250, 268, 287, 302, 304, 307, 310, 316, 325},
                            {1043, 2099, 2924, 2712, 2917, 2340, 1761, 308, 271, 292, 263, 251, 273, 277, 235, 276, 263, 273, 225, 224, 223, 226, 189, 160, 148, 143, 140, 125, 126, 112},
                              {54.5624, 13.3132, 156.903, 8.306}
                        },

                          {
                          {127, 267},
                            {44, 72, 84, 87, 121, 146, 154, 157, 163, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
                              {422, 424, 500, 1024, 1400, 2088, 2203, 2403, 2153, 2230, 2632, 2100, 2725, 2592, 2510, 790, 605, 305, 240, 241, 283, 399, 318, 235, 421, 559, 733, 486, 634, 823, 559, 1078, 1012},
                                {121.629, 23.8008, 196.203, 0.858038}
                          },

                            {
                            {127, 331},
                              {72, 78, 87, 121, 133, 146, 154, 157, 163, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 268, 287, 302, 304, 307, 310, 316, 325},
                                {211, 229, 287, 182, 202, 247, 582, 500, 1082, 1960, 2727, 2557, 2764, 2609, 2152, 1617, 1109, 1183, 326, 223, 226, 229, 220, 209, 229, 165, 155, 169, 167, 159, 155, 164},
                                  {165.403, 4.68359, 199.902, 5.98582}
                            },

                              {
                              {127, 275},
                                {72, 84, 87, 121, 133, 146, 154, 157, 163, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
                                  {211, 212, 202, 231, 232, 221, 391, 406, 581, 1314, 1769, 1687, 1768, 1479, 1368, 857, 900, 748, 229, 187, 200, 194, 167, 178, 116, 200, 188, 146, 157, 158, 154, 126, 201},
                                    {165.475, 4.30968, 199.862, 7.04612}
                              },

                                {
                                {127, 213},
                                  {44, 72, 84, 87, 121, 146, 154, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
                                    {1283, 2289, 3236, 2836, 3151, 2509, 1820, 305, 306, 300, 285, 278, 306, 279, 271, 267, 247, 231, 225, 251, 254, 272, 188, 188, 150, 154, 145, 146, 132, 101},
                                      {52.8717, 15.3867, 155.988, 8.84971}
                                },

                                  { 
                                  {127, 211},
                                    {44, 72, 84, 87, 121, 146, 154, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
                                      {1052, 2131, 3064, 2884, 3048, 2422, 1676, 330, 314, 307, 295, 269, 295, 264, 258, 268, 248, 236, 242, 258, 267, 262, 196, 168, 160, 152, 145, 145, 128, 93},
                                        {55.2669, 13.1556, 156.173, 9.12468}
                                  },

                                    {
                                    {127, 271},
                                      {72, 84, 87, 121, 133, 146, 154, 157, 163, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
                                        {331, 356, 701, 511, 515, 993, 1701, 1482, 1762, 2100, 2418, 2671, 2626, 2279, 2392, 2128, 2104, 1751, 826, 678, 575, 600, 426, 437, 705, 459, 924, 560, 652, 736, 607, 821, 873},
                                          {154.703, 9.67709, 211.553, 10.3496}
                                    },
                                      {
                                      {127, 277},
                                        {72, 84, 87, 121, 133, 146, 154, 157, 163, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
                                          {216, 186, 193, 210, 210, 254, 571, 599, 1060, 1844, 2370, 2043, 2591, 2106, 1668, 1306, 912, 728, 222, 183, 202, 185, 164, 181, 151, 214, 185, 160, 161, 162, 178, 128, 174},
                                            {165.23, 5.9179, 197.02, 5.63348}
                                      },
                                        {
                                        {128, 249},
                                          {44, 72, 84, 87, 121, 146, 154, 157, 163, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
                                            {411, 1443, 2533, 2654, 3073, 2466, 1368, 793, 430, 291, 266, 308, 304, 269, 256, 293, 293, 287, 249, 279, 304, 306, 334, 309, 328, 390, 157, 136, 117, 141, 119, 90, 121},
                                              {72.5646, 8.37544, 152.297, 4.99407}
                                        },
                                          {
                                          {128, 273},
                                            {72, 84, 87, 121, 133, 146, 154, 157, 163, 172, 175, 178, 182, 188, 194, 197, 200, 206, 221, 230, 242, 244, 247, 250, 253, 268, 287, 302, 304, 307, 310, 316, 325},
                                              {136.077, 138.606, 141.909, 168.952, 195.245, 296.44, 684.913, 636.593, 1295.21, 2063.05, 2760, 2538.33, 2582.55, 2370.65, 2050.44, 1442.67, 1156.79, 796.114, 214.786, 154.681, 142.139, 141.701, 139.023, 141.324, 138.509, 137.578, 135.258, 135.041, 135.06, 135, 135.006, 135.015, 135.012},
                                                {163.744, 5.40348, 198.247, 5.49223}
                                          },
                                            {
                                            {90, 0},
                                              {42, 75, 79, 88, 122, 172, 181, 192, 206, 216, 225, 233, 241, 247, 265, 271},
                                                {221, 446, 852, 984, 1290, 340, 306, 282, 209, 178, 170, 184, 173, 167, 164, 156},
                                                  {79.1651, 6.77073, 156.75, 11.481}
                                            },
                                              {
                                              {9, 245},
                                                {39, 169, 176, 191, 212, 233, 240, 267, 279, 283, 299},
                                                  {91, 244, 462, 2575, 2717, 1822, 1272, 209, 194, 136, 123},
                                                    {181.746, 3.31928, 238.459, 7.93025}
                                              },
                                                {
                                                {92, 294},
                                                  {42, 75, 79, 88, 122, 152, 172, 181, 192, 206, 216, 225, 233, 241, 247, 265, 271, 288, 358},
                                                    {473, 707, 889, 1103, 1875, 1855, 739, 546, 757, 762, 622, 564, 473, 418, 440, 353, 371, 478, 824},
                                                      {87.1494, 10.9248, 167.079, 7.02191},
                                                        }
  };
  auto pr_id = 0;
  for(auto& test : tdv)
    {
    ++pr_id;
    auto date_step = 10;
    auto nb_dates = static_cast<unsigned int>(test.t.size());
    auto last_doy = static_cast<unsigned int>(test.t[nb_dates-1]);
    auto nb_out_dates = 
      static_cast<unsigned int>(last_doy/static_cast<double>(date_step));
    //Weekly interpolation

    PixelType dv{nb_dates}, odv{nb_out_dates}, p{nb_dates}, m{nb_dates};
    for(size_t i=0; i<nb_dates; ++i)
      {
      dv[i] = test.t[i];
      p[i] = test.y[i];
      //all dates are valid
      m[i] = PrecisionType{0};
      }
    //weekly output dates
    for(size_t i=0; i<nb_out_dates; ++i)
      odv[i] = i*date_step+1;


    }

//1st maximum
  return EXIT_SUCCESS;
}
